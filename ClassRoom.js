// ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
class ScheduleEditor {
    constructor() {
        this.isEditing = false;
        this.currentEditCell = null;
        this.originalContent = {};
        this.scheduleData = {};
        this.init();
    }

    init() {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        this.loadScheduleData();
        this.bindEvents();
        this.addEditButtons();
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    loadScheduleData() {
        const cells = document.querySelectorAll('.subject-cell');
        cells.forEach(cell => {
            const day = cell.getAttribute('data-day');
            const period = cell.getAttribute('data-period');
            const key = `${day}-${period}`;
            
            const subjectName = cell.querySelector('.subject-name').textContent;
            const teacherName = cell.querySelector('.teacher-name').textContent;
            const roomName = cell.querySelector('.room-name').textContent;
            
            this.scheduleData[key] = {
                subject: subjectName,
                teacher: teacherName,
                room: roomName,
                color: this.getColorClass(cell)
            };
        });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
    addEditButtons() {
        const header = document.querySelector('.header');
        const controlsDiv = document.createElement('div');
        controlsDiv.className = 'edit-controls';
        controlsDiv.innerHTML = `
            <button id="editMode" class="edit-btn">üñäÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
            <button id="saveChanges" class="save-btn" style="display:none;">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button id="cancelEdit" class="cancel-btn" style="display:none;">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            <button id="addPeriod" class="add-btn" style="display:none;">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≤‡∏ö</button>
        `;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
        const style = document.createElement('style');
        style.textContent = `
            .edit-controls {
                margin-top: 15px;
                display: flex;
                gap: 10px;
                justify-content: center;
                flex-wrap: wrap;
            }
            .edit-btn, .save-btn, .cancel-btn, .add-btn {
                padding: 8px 16px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 0.9rem;
                transition: all 0.2s ease;
            }
            .edit-btn {
                background: #3498db;
                color: white;
            }
            .edit-btn:hover {
                background: #2980b9;
            }
            .save-btn {
                background: #27ae60;
                color: white;
            }
            .save-btn:hover {
                background: #219a52;
            }
            .cancel-btn {
                background: #e74c3c;
                color: white;
            }
            .cancel-btn:hover {
                background: #c0392b;
            }
            .add-btn {
                background: #f39c12;
                color: white;
            }
            .add-btn:hover {
                background: #e67e22;
            }
            .editing-mode {
                outline: 2px dashed #3498db;
                cursor: text;
            }
            .time-cell.editing {
                background: #e8f4f8 !important;
                cursor: text;
            }
            .editable-input {
                width: 100%;
                padding: 4px;
                border: 1px solid #3498db;
                border-radius: 3px;
                font-size: inherit;
                font-family: inherit;
                background: white;
                text-align: center;
            }
            .header.editing h1, .header.editing p {
                outline: 2px dashed #3498db;
                padding: 5px;
                border-radius: 3px;
                cursor: text;
            }
        `;
        document.head.appendChild(style);
        
        header.appendChild(controlsDiv);
        this.bindControlEvents();
    }

    // ‡∏ú‡∏π‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
    bindControlEvents() {
        document.getElementById('editMode').addEventListener('click', () => this.toggleEditMode());
        document.getElementById('saveChanges').addEventListener('click', () => this.saveChanges());
        document.getElementById('cancelEdit').addEventListener('click', () => this.cancelEdit());
        document.getElementById('addPeriod').addEventListener('click', () => this.addNewPeriod());
    }

    // ‡∏ú‡∏π‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
    bindEvents() {
        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        document.addEventListener('click', (e) => {
            if (this.isEditing) {
                this.handleEditClick(e);
            }
        });

        // ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && this.isEditing) {
                this.finishEdit();
            }
            if (e.key === 'Escape' && this.isEditing) {
                this.cancelCurrentEdit();
            }
        });
    }

    // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    toggleEditMode() {
        this.isEditing = !this.isEditing;
        const editBtn = document.getElementById('editMode');
        const saveBtn = document.getElementById('saveChanges');
        const cancelBtn = document.getElementById('cancelEdit');
        const addBtn = document.getElementById('addPeriod');
        
        if (this.isEditing) {
            editBtn.style.display = 'none';
            saveBtn.style.display = 'inline-block';
            cancelBtn.style.display = 'inline-block';
            addBtn.style.display = 'inline-block';
            this.enableEditMode();
        } else {
            editBtn.style.display = 'inline-block';
            saveBtn.style.display = 'none';
            cancelBtn.style.display = 'none';
            addBtn.style.display = 'none';
            this.disableEditMode();
        }
    }

    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    enableEditMode() {
        document.body.classList.add('editing-mode');
        document.querySelector('.header').classList.add('editing');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        const info = document.createElement('div');
        info.id = 'edit-info';
        info.innerHTML = `
            <div style="background: #3498db; color: white; padding: 10px; text-align: center; font-size: 0.9rem;">
                üí° ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç | ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô | ‡∏Å‡∏î Escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </div>
        `;
        document.querySelector('.container').insertBefore(info, document.querySelector('.table-container'));
        
        // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
        const allCells = document.querySelectorAll('.subject-cell, .time-cell');
        allCells.forEach(cell => {
            cell.classList.add('editing-mode');
        });
    }

    // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    disableEditMode() {
        document.body.classList.remove('editing-mode');
        document.querySelector('.header').classList.remove('editing');
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        const info = document.getElementById('edit-info');
        if (info) info.remove();
        
        // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        const allCells = document.querySelectorAll('.subject-cell, .time-cell');
        allCells.forEach(cell => {
            cell.classList.remove('editing-mode');
        });
        
        this.finishEdit();
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    handleEditClick(e) {
        const target = e.target;
        
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        if (target.matches('.header h1') || target.matches('.header p')) {
            this.editHeaderText(target);
            return;
        }
        
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤
        if (target.matches('.time-cell') || target.closest('.time-cell')) {
            this.editTimeCell(target.closest('.time-cell') || target);
            return;
        }
        
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
        if (target.matches('.subject-name, .teacher-name, .room-name') || target.closest('.subject-cell')) {
            this.editSubjectCell(target);
            return;
        }
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    editHeaderText(element) {
        if (element.querySelector('input')) return;
        
        const originalText = element.textContent;
        const input = document.createElement('input');
        input.type = 'text';
        input.value = originalText;
        input.className = 'editable-input';
        input.style.width = '100%';
        input.style.fontSize = window.getComputedStyle(element).fontSize;
        input.style.fontWeight = window.getComputedStyle(element).fontWeight;
        input.style.textAlign = 'center';
        
        element.innerHTML = '';
        element.appendChild(input);
        input.focus();
        input.select();
        
        const finishEdit = () => {
            const newText = input.value.trim() || originalText;
            element.textContent = newText;
        };
        
        input.addEventListener('blur', finishEdit);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishEdit();
            }
        });
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÄ‡∏ß‡∏•‡∏≤
    editTimeCell(cell) {
        if (cell.querySelector('input')) return;
        
        const originalText = cell.innerHTML;
        const input = document.createElement('input');
        input.type = 'text';
        input.value = cell.textContent;
        input.className = 'editable-input';
        
        cell.innerHTML = '';
        cell.appendChild(input);
        cell.classList.add('editing');
        input.focus();
        input.select();
        
        const finishEdit = () => {
            const newText = input.value.trim();
            if (newText) {
                cell.innerHTML = newText.replace(/\n/g, '<br>');
            } else {
                cell.innerHTML = originalText;
            }
            cell.classList.remove('editing');
        };
        
        input.addEventListener('blur', finishEdit);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishEdit();
            }
        });
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
    editSubjectCell(target) {
        const cell = target.closest('.subject-cell');
        if (!cell || cell.querySelector('input')) return;
        
        const subjectName = cell.querySelector('.subject-name');
        const teacherName = cell.querySelector('.teacher-name');
        const roomName = cell.querySelector('.room-name');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        const form = document.createElement('div');
        form.className = 'edit-form';
        form.innerHTML = `
            <input type="text" class="subject-input" value="${subjectName.textContent}" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤">
            <input type="text" class="teacher-input" value="${teacherName.textContent}" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏π">
            <input type="text" class="room-input" value="${roomName.textContent}" placeholder="‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô">
            <div class="color-picker">
                <button type="button" class="color-option" data-color="color-none" style="background: #ffffff; border: 1px solid #ccc;"></button>
                <button type="button" class="color-option" data-color="color-blue" style="background: #eaf4fd;"></button>
                <button type="button" class="color-option" data-color="color-green" style="background: #eafaf1;"></button>
                <button type="button" class="color-option" data-color="color-yellow" style="background: #fef9e7;"></button>
                <button type="button" class="color-option" data-color="color-pink" style="background: #fdf2f8;"></button>
                <button type="button" class="color-option" data-color="color-purple" style="background: #f4f3ff;"></button>
                <button type="button" class="color-option" data-color="color-orange" style="background: #fff7ed;"></button>
                <button type="button" class="color-option" data-color="color-red" style="background: #fef2f2;"></button>
            </div>
        `;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
        if (!document.getElementById('edit-form-styles')) {
            const style = document.createElement('style');
            style.id = 'edit-form-styles';
            style.textContent = `
                .edit-form {
                    display: flex;
                    flex-direction: column;
                    gap: 4px;
                    padding: 5px;
                }
                .edit-form input {
                    padding: 4px;
                    border: 1px solid #3498db;
                    border-radius: 3px;
                    font-size: 0.8rem;
                    text-align: center;
                }
                .color-picker {
                    display: flex;
                    gap: 2px;
                    justify-content: center;
                    margin-top: 4px;
                }
                .color-option {
                    width: 12px;
                    height: 12px;
                    border: 1px solid #ccc;
                    border-radius: 2px;
                    cursor: pointer;
                    transition: transform 0.1s ease;
                }
                .color-option:hover {
                    transform: scale(1.2);
                }
                .color-option.selected {
                    border: 2px solid #3498db;
                }
            `;
            document.head.appendChild(style);
        }
        
        const originalContent = cell.innerHTML;
        cell.innerHTML = '';
        cell.appendChild(form);
        
        // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏™‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const currentColor = this.getColorClass(cell);
        const colorOption = form.querySelector(`[data-color="${currentColor}"]`);
        if (colorOption) colorOption.classList.add('selected');
        
        // ‡∏ú‡∏π‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ
        form.querySelectorAll('.color-option').forEach(option => {
            option.addEventListener('click', () => {
                form.querySelectorAll('.color-option').forEach(o => o.classList.remove('selected'));
                option.classList.add('selected');
            });
        });
        
        // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà input ‡πÅ‡∏£‡∏Å
        form.querySelector('.subject-input').focus();
        
        const finishEdit = () => {
            const newSubject = form.querySelector('.subject-input').value.trim();
            const newTeacher = form.querySelector('.teacher-input').value.trim();
            const newRoom = form.querySelector('.room-input').value.trim();
            const selectedColor = form.querySelector('.color-option.selected');
            const newColor = selectedColor ? selectedColor.getAttribute('data-color') : 'color-none';
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const day = cell.getAttribute('data-day');
            const period = cell.getAttribute('data-period');
            const key = `${day}-${period}`;
            
            this.scheduleData[key] = {
                subject: newSubject,
                teacher: newTeacher,
                room: newRoom,
                color: newColor
            };
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤
            cell.innerHTML = `
                <div class="cell-content">
                    <div class="subject-name">${newSubject}</div>
                    <div class="teacher-name">${newTeacher}</div>
                    <div class="room-name">${newRoom}</div>
                </div>
            `;
            
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ
            cell.className = `subject-cell ${newColor}`;
            cell.setAttribute('data-day', day);
            cell.setAttribute('data-period', period);
        };
        
        // ‡∏ú‡∏π‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
        form.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                finishEdit();
            }
            if (e.key === 'Escape') {
                cell.innerHTML = originalContent;
            }
        });
        
        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        document.addEventListener('click', function outsideClick(e) {
            if (!cell.contains(e.target)) {
                finishEdit();
                document.removeEventListener('click', outsideClick);
            }
        });
    }

    // ‡∏´‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏µ
    getColorClass(element) {
        const classes = element.className.split(' ');
        const colorClass = classes.find(cls => cls.startsWith('color-'));
        return colorClass || 'color-none';
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
    addNewPeriod() {
        const tbody = document.querySelector('.schedule-table tbody');
        const newRow = document.createElement('tr');
        const periodNumber = tbody.querySelectorAll('tr').length - 1; // ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏û‡∏±‡∏Å
        
        newRow.innerHTML = `
            <td class="time-cell">‡∏Ñ‡∏≤‡∏ö ${periodNumber}<br>‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà</td>
            <td class="subject-cell color-none" data-day="‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå" data-period="${periodNumber}">
                <div class="cell-content">
                    <div class="subject-name">‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="teacher-name">‡∏Ñ‡∏£‡∏π‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="room-name">‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</div>
                </div>
            </td>
            <td class="subject-cell color-none" data-day="‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£" data-period="${periodNumber}">
                <div class="cell-content">
                    <div class="subject-name">‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="teacher-name">‡∏Ñ‡∏£‡∏π‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="room-name">‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</div>
                </div>
            </td>
            <td class="subject-cell color-none" data-day="‡∏û‡∏∏‡∏ò" data-period="${periodNumber}">
                <div class="cell-content">
                    <div class="subject-name">‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="teacher-name">‡∏Ñ‡∏£‡∏π‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="room-name">‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</div>
                </div>
            </td>
            <td class="subject-cell color-none" data-day="‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ" data-period="${periodNumber}">
                <div class="cell-content">
                    <div class="subject-name">‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="teacher-name">‡∏Ñ‡∏£‡∏π‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="room-name">‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</div>
                </div>
            </td>
            <td class="subject-cell color-none" data-day="‡∏®‡∏∏‡∏Å‡∏£‡πå" data-period="${periodNumber}">
                <div class="cell-content">
                    <div class="subject-name">‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="teacher-name">‡∏Ñ‡∏£‡∏π‡πÉ‡∏´‡∏°‡πà</div>
                    <div class="room-name">‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</div>
                </div>
            </td>
        `;
        
        tbody.appendChild(newRow);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        newRow.querySelectorAll('.subject-cell, .time-cell').forEach(cell => {
            cell.classList.add('editing-mode');
        });
        
        alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    saveChanges() {
        alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‚úÖ');
        console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:', this.scheduleData);
        this.toggleEditMode();
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    cancelEdit() {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            location.reload(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
        }
    }

    // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    finishEdit() {
        const inputs = document.querySelectorAll('.editable-input');
        inputs.forEach(input => {
            input.blur();
        });
        this.currentEditCell = null;
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    cancelCurrentEdit() {
        if (this.currentEditCell) {
            this.currentEditCell.innerHTML = this.originalContent[this.currentEditCell.id] || this.currentEditCell.innerHTML;
            this.currentEditCell = null;
        }
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', function() {
    new ScheduleEditor();
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function exportSchedule() {
    const scheduleData = JSON.stringify(window.scheduleEditor?.scheduleData || {}, null, 2);
    const blob = new Blob([scheduleData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'schedule-data.json';
    a.click();
    URL.revokeObjectURL(url);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function importSchedule() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    if (window.scheduleEditor) {
                        window.scheduleEditor.scheduleData = data;
                        location.reload();
                    }
                } catch (error) {
                    alert('‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!');
                }
            };
            reader.readAsText(file);
        }
    };
    input.click();
}